generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(cuid())
  name                   String?
  isDisabled             Boolean          @default(false)
  email                  String?          @unique
  emailVerified          DateTime?
  role                   Role             @default(User)
  image                  String
  accounts               Account[]
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  UpdatedChapterItem     ChapterItem[]
  UpdatedChapter         Chapter[]
  UpdatedLaws            Laws[]
  UpdatedServerRules     ServerRules[]
  UpdatedSubChapterItems SubChapterItem[]
  ConnectedServers       Server[]         @relation("ConnectedServers")
  ServersUpdatedBy       Server[]         @relation("ServerUpdatedBy")

  @@map("users")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Server {
  id               String        @id @default(uuid())
  name             String
  allLaws          Laws[]
  localServerRules ServerRules[]
  Users            User[]        @relation("ConnectedServers")
  updatedAt        DateTime      @updatedAt
  updatedBy        String
  UpdatedByUser    User          @relation("ServerUpdatedBy", fields: [updatedBy], references: [id])

  @@map("servers")
}

model Laws {
  id            String    @id @default(uuid())
  name          String
  updatedAt     DateTime  @updatedAt
  chapters      Chapter[]
  serverId      String
  Server        Server    @relation(fields: [serverId], references: [id])
  updatedBy     String
  updatedByUser User      @relation(fields: [updatedBy], references: [id])

  @@map("laws")
}

model ServerRules {
  id            String    @id @default(uuid())
  name          String
  updatedAt     DateTime  @updatedAt
  updatedBy     String
  serverId      String
  chapters      Chapter[]
  Server        Server    @relation(fields: [serverId], references: [id])
  updatedByUser User      @relation(fields: [updatedBy], references: [id])

  @@map("serverRules")
}

model GlobalServerRules {
  id       String    @id @default(uuid())
  name     String
  chapters Chapter[]

  @@map("globalServerRules")
}

model Chapter {
  id                  String             @id @default(uuid())
  chapterNumber       String
  chapterName         String
  updatedAt           DateTime           @updatedAt
  updatedBy           String
  rulesId             String?
  globalServerRulesId String?
  lawsId              String?
  chapterItems        ChapterItem[]
  GlobalServerRules   GlobalServerRules? @relation(fields: [globalServerRulesId], references: [id])
  Laws                Laws?              @relation(fields: [lawsId], references: [id])
  ServerRules         ServerRules?       @relation(fields: [rulesId], references: [id])
  updatedByUser       User               @relation(fields: [updatedBy], references: [id])

  @@map("chapters")
}

model ChapterItem {
  id            String           @id @default(uuid())
  article       String
  titleArticle  String
  punishment    Json?
  keyword       Json?
  exception     String?
  explanation   String?
  note          String?
  updatedAt     DateTime         @updatedAt
  updatedBy     String
  chapterId     String
  Chapter       Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  UpdatedByUser User             @relation(fields: [updatedBy], references: [id])
  list          SubChapterItem[]

  @@map("chapterItems")
}

model SubChapterItem {
  id            String      @id @default(uuid())
  article       String
  titleArticle  String
  note          String?
  exception     String?
  updatedAt     DateTime    @updatedAt
  updatedBy     String
  chapterItemId String
  ChapterItem   ChapterItem @relation(fields: [chapterItemId], references: [id], onDelete: Cascade)
  UpdatedByUser User        @relation(fields: [updatedBy], references: [id])

  @@map("subChapterItems")
}

enum Role {
  Admin
  Curator
  Editor
  User
}
